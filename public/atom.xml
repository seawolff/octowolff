<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hi I'm Wolff.]]></title>
  <link href="http://chriswolffdevelopment.com/atom.xml" rel="self"/>
  <link href="http://chriswolffdevelopment.com/"/>
  <updated>2013-04-09T23:13:21-05:00</updated>
  <id>http://chriswolffdevelopment.com/</id>
  <author>
    <name><![CDATA[Wolff]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[test post]]></title>
    <link href="http://chriswolffdevelopment.com/articles/2013/04/09/test/"/>
    <updated>2013-04-09T23:12:00-05:00</updated>
    <id>http://chriswolffdevelopment.com/articles/2013/04/09/test</id>
    <content type="html"><![CDATA[<h2>Hello World</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How web development could take a lesson from urban planning]]></title>
    <link href="http://chriswolffdevelopment.com/articles/2012/10/02/how-app-development-could-learn-from-urban-planning/"/>
    <updated>2012-10-02T16:20:00-05:00</updated>
    <id>http://chriswolffdevelopment.com/articles/2012/10/02/how-app-development-could-learn-from-urban-planning</id>
    <content type="html"><![CDATA[<p>Over half of the world&#8217;s population lives in urban areas - a number that is expected to grow to about 75% by the year 2050. This fact is becoming exponentially clear to urban planners, architects, builders, and designers the world over. But what does this mean? It means that in the next 35 years we as humans will have to reshape the way we live and work together.</p>

<p>As a web developer I was quick to draw a correlation between urbanization and the current state of the web. A few years ago it was assumed that the average user was comfortable, stationary, and had a high speed connection. However now we live in a world where just about every device has the ability to connect to the Internet. We no longer can dictate how our users consume our content. And in that vein it has become extremely important for those of us working in the web to understand the ubiquity of our content.</p>

<p>In this way we as web designers and developers are facing the daunting role of adapting to how humans interact with our content. A role not too different from urban planners and designers facing rapid urbanization.</p>

<!-- more -->


<h2>Embrace Unpredictability</h2>

<p>I recently attended a talk at <a href="http://www.webvisionsevent.com/chicago/">Web Visions conf</a> in Chicago by <a href="https://twitter.com/brad_frost">Brad Frost</a> In which he talked about the need to create a future friendly web experience. He addressed the fact the current web standards we have in place just simply won&#8217;t hold up to the number of devices that are being created to connect to the web. The solution he proposed is to embrace unpredictability. Just as city planners and developers can&#8217;t dictate how its residents live, we as web developers and designers can&#8217;t dictate how our users interact with our content.</p>

<h2>So where does that leave us?</h2>

<p>Well if you&#8217;re like me you&#8217;re an insufferable optimist. And while its easy to get mad that some kid is potentially trying to access one of my applications via his shitty game console and thus getting a shitty user experience, I think the appropriate response is instead one of acceptance and joy. It&#8217;s important for us to embrace this diversity.</p>

<h2>We&#8217;re human after all right?</h2>

<p>Naturally my first reaction to the kid trying to access my app via his shitty game console or his mother trying to view it on her ancient blackberry device is &#8220;You&#8217;re doing it wrong!&#8221; I mean after all if you have a shitty web browser you deserve a shitty user experience right?</p>

<p>It&#8217;s easy for us to assume that our users should have the latest mobile webkit browser and be on an LTE connection. But the truth is we&#8217;d be wrong. In the same way that we&#8217;d be wrong to assume that all users have a car and a means of driving it to work or wherever they need to go. We can assume nothing.</p>

<h2>Paying attention to content</h2>

<p>It&#8217;s so easy for developers to assume. Just as we&#8217;d be wrong to assume that all of our users have a car, we&#8217;d be wrong to assume that our users want a separate mobile site or adversely a user experience with all the same features and navigation as the desktop users. This is why it&#8217;s important to pay attention to content strategy.</p>

<p>Problems happen. For example: traffic and large cities go hand in hand. When large groups of individuals are trying to get from point a to point b simultaneously you&#8217;re bound to find yourself in a traffic jam. The same can be said in the web world. It&#8217;s important for us to be flexible in how we solve the issue of user interaction. For instance, if a majority of your users are accessing your application on a sub-par data connection, it could be assumed that even the most advanced responsive site will move at the rate of bumper to bumper traffic. This is why it&#8217;s important to audit content first before focusing on how you develop your mobile application. This way you won&#8217;t simply be forcing all your devices in the metaphorical bike lane unless the context is appropriate.</p>

<h2>Traffic? So why not just build a fucking highway?</h2>

<p>Excusing the crude metaphor: assume our highway in this instance represents the approach of graceful degradation. If we build on a flexible grid then our desktop layout can break down to mobile. Boom. We&#8217;re getting our content to smaller devices and our clients are happy. Done! The only issue with this is we&#8217;re still left with extraneous elements that may not work on mobile.  <strong>A.K.A. We&#8217;re still stuck in traffic.</strong> Mobile-first development allows the designer or developer to focus on the important UI elements and cut out extraneous distractions.</p>

<p>Again allow me to take the adverse viewpoint. We cannot just create a responsive, mobile-first experience via media queries and be done with it. As Brad pointed out in his talk, responsive web design is simply just the tip of the iceberg. Issues such as content strategy, performance, ergonomics, touch, feature detection, and conditional loading are just a few of the important issues that make up true progressive enhancement.</p>

<h2>Let your content be freeeeee!</h2>

<p>Your content should move with you. I&#8217;ve always had a deep hatred for share buttons and bookmarks. I hate using them because it&#8217;s simply a marker pointing to where the origin of the content lives instead of bringing my content where I want it. Your content should revolve around your users. In that way it&#8217;s important to allow it to be partitioned so it can be ported to a container of any size.</p>

<p>Copenhagen, Denmark took a very interesting approach to solving their transportation problems. They separated their bike lane from the road by a lane of parked cars. This encouraged bikers who were nervous about biking in the street to feel more comfortable about biking to and from where they need to go. Consider this to be our content extraction layer. It&#8217;s important to have this separation between content and display. Your interface should consist of coordinated templating that pulls content from its base into whatever display is appropriate. This way you only need to write your content once in CMS while still re-purposing it as many times as needed.</p>

<h2>Change we can believe in</h2>

<p><em>Cue obligatory Obama 08 poster</em></p>

<p>Keep your chin up. It&#8217;s so easy to feel bogged down by the rapid progression of the web. Especially if you have an eye to standards. This is an exciting time to work with the web or even to live in the world. Change is good. And frankly we&#8217;re gonna&#8217; have a lot of it in our lifetime both on the web and off.</p>

<p>The important factor is to keep future friendly thinking. Focus on multiple access points for your content, and make sure to keep your design mobile-accessible first and foremost. Most importantly don&#8217;t run away from the fact that your application will look like shit on your neighbor&#8217;s high-tech Internet-accessible refrigerator thing-a-mabob. Embrace it. And if it&#8217;s valuable to your users and business over the long-term it will pay off in the future.</p>

<h3>Sources:</h3>

<ul>
<li><a href="http://blog.manikrathee.com/posts/2012/09/28/brad-frost-future-friendly-web.html">Brad Frost WebVisions talk</a></li>
<li><a href="http://futurefriend.ly">futurefriend.ly</a></li>
<li><a href="http://adactio.com/journal/4523/">Content First</a></li>
<li><a href="http://www.lukew.com/ff/entry.asp?933">Mobile First</a></li>
<li><a href="http://www.alistapart.com/articles/orbital-content/">Orbital Content</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Future Friendly Web]]></title>
    <link href="http://chriswolffdevelopment.com/articles/2012/09/28/the-future-friendly-web/"/>
    <updated>2012-09-28T19:24:00-05:00</updated>
    <id>http://chriswolffdevelopment.com/articles/2012/09/28/the-future-friendly-web</id>
    <content type="html"><![CDATA[<p><a href="http://blog.manikrathee.com/posts/2012/09/28/brad-frost-future-friendly-web.html">Great notes</a> from a wonderful talk on content accessibility by <a href="http://twitter.com/brad_frost">Brad Frost</a> at WebVisions Conf. As taken by <a href="http://twitter.com/ManikRathee">Manik Rathee</a>. Couldn&#8217;t have put it better myself.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making use of the Oldie Compiler]]></title>
    <link href="http://chriswolffdevelopment.com/articles/2012/09/04/making-use-of-the-oldie-compiler/"/>
    <updated>2012-09-04T12:53:00-05:00</updated>
    <id>http://chriswolffdevelopment.com/articles/2012/09/04/making-use-of-the-oldie-compiler</id>
    <content type="html"><![CDATA[<h2>The Joy of CSS Conditional Comments</h2>

<p>Undoubtably the most masterful thing about Paul Irish&#8217;s HTML5 Boilerplate is the IE CSS conditional comments to be found at the beginning of the boilerplate itself. CSS conditional comments, such as the oldie conditional found in the Boiler Plate, allow the developer to use page-specific javascript and styles which play a huge role in developing HTML5 applications.</p>

<h2>The Problem</h2>

<p>Now typically the more I write mobile-first, breakpoint-specific styling the more I have to repeat myself. It&#8217;s simply a given. Most UI Engineers will take the approach of working top down, organizing all their styles from the global scope to mobile, to tablet, to desktop to HD, etc. This is all fine and dandy until you get to styling for your &#8216;oldie&#8217; IE browsers [IE 6/7/8] which don&#8217;t support media queries.</p>

<p>Previously my thought process to solving this was the following:</p>

<p><em>&#8220;Simple! I&#8217;ll just copy all my styles in my breakpoints and paste them seperately by prepending an .oldie class to the selectors.&#8221;</em></p>

<p>This approach worked and all in all was fine. However, like most developers I became lazy. I got tired of copying styles I had written in media queries and pasting them where I could scope them with an <code>.oldie</code> class. Even when I was writing my styles in Less it was still a burden to copy my styles in both my 768 and 960 breakpoints and paste them in the scope of my <code>.oldie</code> class. It was evident I needed another solution.</p>

<h2>The Lightbulb Moment</h2>

<p>After several over-complicated attempts I realized re-inventing the wheel wasn&#8217;t needed. Since I was already writing my styles with a CSS compiler such as Less or Sass all I had to do was harness the power of the mixins.</p>

<p><em>Cue the mother-fucking lightbulb!</em></p>

<!-- more -->


<p>All I had to do was write my breakpoint specific styling in several mixins and then I could import them in the <code>.oldie</code> class and specified media queries at the bottom of the page. The solution was so simple I wanted to kick myself in the face.</p>

<h2>The Implimentation</h2>

<p>For those not familiar with CSS compilers such as Less or Sass, mixins allow a block of styles to be reused throughout an application simply by scoping them inside a named class or include. This makes it possible to re-purpose whole chunks of styling and thus avoid repeating yourself throughout the application. In this case this was exactly the thing I needed to recreate my <code>.oldie</code> class.</p>

<p>To do this in Sass I simply just created two breakpoint mixins like so:</p>

<figure class='code'><figcaption><span>Breakpoint Mixins </span></figcaption>
 <div class='highlight'><table><tbody><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='SASS'><span class='line'> <span class='c1'>//all global and mobile-specific styling</span>
</span><span class='line'>
</span><span class='line'>  <span class='k'>@mixin</span><span class='nf'> sevensixtyeight</span>
</span><span class='line'>      <span class='c1'>//all min-width:768px styles go here</span>
</span><span class='line'>
</span><span class='line'>  <span class='k'>@mixin</span> <span class='nc'>ninesixty</span>
</span><span class='line'>      <span class='c1'>//all min-width:960px styles go here</span>
</span></code></pre></td></tr></tbody></table></div></figure>


<p>Instead of placing my styles in a media query like so: <code>@media (min-width:x) { ... }</code> I could place all my breakpointed styles into the mixins I had created above which would be rendered into the stylesheet when and where I needed. Simple.</p>

<p>Next I created my actual compiler where I would import the mixins at the needed breakpoints and repurpose them within the scope of my <code>.oldie</code> class.</p>

<figure class='code'><figcaption><span>Simple Oldie Compiler </span></figcaption>
 <div class='highlight'><table><tbody><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='SASS'><span class='line'> <span class='c1'>//Compiler</span>
</span><span class='line'>  <span class='c1'>//No breakpoint specific styles here</span>
</span><span class='line'>
</span><span class='line'>  <span class='k'>@media</span><span class='o'>(</span><span class='nt'>min-width</span><span class='nd'>:768px</span><span class='o'>)</span>
</span><span class='line'>      <span class='k'>@include</span><span class='nd'> sevensixtyeight</span>
</span><span class='line'>
</span><span class='line'>  <span class='k'>@media</span><span class='o'>(</span><span class='nt'>min-width</span><span class='nd'>:960px</span><span class='o'>)</span>
</span><span class='line'>      <span class='k'>@include</span><span class='nd'> ninesixty</span>
</span><span class='line'>
</span><span class='line'>  <span class='nc'>.oldie</span>
</span><span class='line'>      <span class='k'>@include</span><span class='nd'> sevensixtyeight</span>
</span><span class='line'>      <span class='k'>@include</span><span class='nd'> ninesixty</span>
</span></code></pre></td></tr></tbody></table></div></figure>


<p>BOOM! I was done. Everything I wrote in my <code>.sevensixtyeight()</code> and <code>.ninesixty()</code> mixins could be imported simultaneously into my <code>.oldie</code> class with ease.</p>

<h2>Extending this capability</h2>

<p>I was very content with this functionality. So much so that my colleages and I began using this model immediately without really discussing the ways in which we planned to extend the functionality. I mean why would we? All of our current problems had been solved.</p>

<p>A few weeks ago <a href='https://twitter.com/gesa' title='@gesa'>@gesa</a> shared a gist with me of how she had included HD, retina, and mobile-specific media queries into her oldie compiler. Stupid simple. Again I wanted to kick myself in the face that I hadn&#8217;t thought of this myself. The solution was simple just add the following optional mixins: <code>.foureighty()</code>, <code>.tweleveeighty()</code>, <code>.nineteentwenty()</code>, <code>.retina()</code> in Less and <code>@include foureighty</code>, <code>@include tweleveeighty</code>, <code>@include nineteentwenty</code>, <code>@include retina</code> in Sass.</p>

<figure class='code'><figcaption><span>Extended Oldie Compiler </span></figcaption>
 <div class='highlight'><table><tbody><tr><td class='gutter'><pre class='line-numbers'><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='SASS'><span class='line'> <span class='c1'>//Compiler</span>
</span><span class='line'>  <span class='c1'>//No breakpoint specific styles here</span>
</span><span class='line'>
</span><span class='line'>  <span class='k'>@media</span> <span class='o'>(</span><span class='nt'>min-width</span><span class='nd'>:480px</span><span class='o'>)</span>
</span><span class='line'>      <span class='k'>@include</span><span class='nd'> foureighty</span>
</span><span class='line'>
</span><span class='line'>  <span class='k'>@media</span><span class='o'>(</span><span class='nt'>min-width</span><span class='nd'>:768px</span><span class='o'>)</span>
</span><span class='line'>      <span class='k'>@include</span><span class='nd'> sevensixtyeight</span>
</span><span class='line'>
</span><span class='line'>  <span class='k'>@media</span><span class='o'>(</span><span class='nt'>min-width</span><span class='nd'>:960px</span><span class='o'>)</span>
</span><span class='line'>      <span class='k'>@include</span><span class='nd'> ninesixty</span>
</span><span class='line'>
</span><span class='line'>  <span class='k'>@media</span><span class='o'>(</span><span class='nt'>min-width</span><span class='nd'>:1280px</span><span class='o'>)</span>
</span><span class='line'>      <span class='k'>@include</span><span class='nd'> tweleveeighty</span>
</span><span class='line'>
</span><span class='line'>  <span class='k'>@media</span><span class='o'>(</span><span class='nt'>min-width</span><span class='nd'>:1920px</span><span class='o'>)</span>
</span><span class='line'>      <span class='k'>@include</span><span class='nd'> nineteentwenty</span>
</span><span class='line'>
</span><span class='line'>  <span class='k'>@media</span> <span class='o'>(</span><span class='nt'>-webkit-min-device-pixel-ratio</span> <span class='nd'>:</span> <span class='nt'>1</span><span class='nc'>.5</span><span class='o'>),(</span><span class='nt'>min-device-pixel-ratio</span> <span class='nd'>:</span> <span class='nt'>1</span><span class='nc'>.5</span><span class='o'>)</span>
</span><span class='line'>      <span class='k'>@include</span><span class='nd'> retina</span>
</span><span class='line'>
</span><span class='line'>  <span class='nc'>.oldie</span>
</span><span class='line'>      <span class='k'>@include</span><span class='nd'> sevensixtyeight</span>
</span><span class='line'>      <span class='k'>@include</span><span class='nd'> ninesixty</span>
</span></code></pre></td></tr></tbody></table></div></figure>


<p>None of these new media queries are required since by default since none of these mixins are necessarily needed in the <code>.oldie</code> class. However, it&#8217;s good to have them included just in case you may need to re-purpose them later in your application.</p>

<h2>Pros &amp; Cons</h2>

<h3>Pros:</h3>

<ul>
<li>Saves time by compiling any needed media queries into an oldie specific classes</li>
<li>Can be re-purposed cross-application</li>
</ul>


<h3>Cons:</h3>

<ul>
<li>None really other then the fact you&#8217;ll need to install either Sass or Less as well as Node and any other dependencies.</li>
</ul>


<h2>Final Thoughts</h2>

<p>One last thought. The other day I was reading a <a href='http://simurai.com/post/30451824480/media-query-splitting' title='great post'>great post</a> regarding &#8216;media query splitting&#8217; written by <a href='https://twitter.com/simurai' title='@simurai'>@simurai</a>. I rather liked this  organizational approach other then the fact that it didn&#8217;t work for <code>.oldie</code> specific styling. The Oldie Compiler model solves this issue and makes this a very viable option.</p>

<h2>More Info</h2>

<p><a href='https://github.com/seawolff/oldiecompiler' title='Check out Oldie Compiler on Github'>Check out Oldie Compiler on Github</a></p>
]]></content>
  </entry>
  
</feed>
